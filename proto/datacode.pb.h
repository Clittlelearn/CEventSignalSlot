// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datacode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datacode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datacode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datacode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datacode_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datacode_2eproto;
class _file;
struct _fileDefaultTypeInternal;
extern _fileDefaultTypeInternal __file_default_instance_;
class proto_package;
struct proto_packageDefaultTypeInternal;
extern proto_packageDefaultTypeInternal _proto_package_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::_file* Arena::CreateMaybeMessage<::_file>(Arena*);
template<> ::proto_package* Arena::CreateMaybeMessage<::proto_package>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum _file_FILESTATUS : int {
  _file_FILESTATUS_NONE = 0,
  _file_FILESTATUS_BEGIN = 1,
  _file_FILESTATUS_BODY = 2,
  _file_FILESTATUS_END = 3,
  _file_FILESTATUS_REBEGIN = 4,
  _file_FILESTATUS_BEGINEND = 5,
  _file_FILESTATUS_REBEGINEND = 6,
  _file_FILESTATUS__file_FILESTATUS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  _file_FILESTATUS__file_FILESTATUS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool _file_FILESTATUS_IsValid(int value);
constexpr _file_FILESTATUS _file_FILESTATUS_FILESTATUS_MIN = _file_FILESTATUS_NONE;
constexpr _file_FILESTATUS _file_FILESTATUS_FILESTATUS_MAX = _file_FILESTATUS_REBEGINEND;
constexpr int _file_FILESTATUS_FILESTATUS_ARRAYSIZE = _file_FILESTATUS_FILESTATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* _file_FILESTATUS_descriptor();
template<typename T>
inline const std::string& _file_FILESTATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, _file_FILESTATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function _file_FILESTATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    _file_FILESTATUS_descriptor(), enum_t_value);
}
inline bool _file_FILESTATUS_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, _file_FILESTATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<_file_FILESTATUS>(
    _file_FILESTATUS_descriptor(), name, value);
}
// ===================================================================

class proto_package final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_package) */ {
 public:
  inline proto_package() : proto_package(nullptr) {}
  ~proto_package() override;
  explicit PROTOBUF_CONSTEXPR proto_package(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  proto_package(const proto_package& from);
  proto_package(proto_package&& from) noexcept
    : proto_package() {
    *this = ::std::move(from);
  }

  inline proto_package& operator=(const proto_package& from) {
    CopyFrom(from);
    return *this;
  }
  inline proto_package& operator=(proto_package&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const proto_package& default_instance() {
    return *internal_default_instance();
  }
  static inline const proto_package* internal_default_instance() {
    return reinterpret_cast<const proto_package*>(
               &_proto_package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(proto_package& a, proto_package& b) {
    a.Swap(&b);
  }
  inline void Swap(proto_package* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(proto_package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  proto_package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<proto_package>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const proto_package& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const proto_package& from) {
    proto_package::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proto_package* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_package";
  }
  protected:
  explicit proto_package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:proto_package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datacode_2eproto;
};
// -------------------------------------------------------------------

class _file final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:_file) */ {
 public:
  inline _file() : _file(nullptr) {}
  ~_file() override;
  explicit PROTOBUF_CONSTEXPR _file(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  _file(const _file& from);
  _file(_file&& from) noexcept
    : _file() {
    *this = ::std::move(from);
  }

  inline _file& operator=(const _file& from) {
    CopyFrom(from);
    return *this;
  }
  inline _file& operator=(_file&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const _file& default_instance() {
    return *internal_default_instance();
  }
  static inline const _file* internal_default_instance() {
    return reinterpret_cast<const _file*>(
               &__file_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(_file& a, _file& b) {
    a.Swap(&b);
  }
  inline void Swap(_file* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(_file* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  _file* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<_file>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const _file& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const _file& from) {
    _file::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(_file* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "_file";
  }
  protected:
  explicit _file(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef _file_FILESTATUS FILESTATUS;
  static constexpr FILESTATUS NONE =
    _file_FILESTATUS_NONE;
  static constexpr FILESTATUS BEGIN =
    _file_FILESTATUS_BEGIN;
  static constexpr FILESTATUS BODY =
    _file_FILESTATUS_BODY;
  static constexpr FILESTATUS END =
    _file_FILESTATUS_END;
  static constexpr FILESTATUS REBEGIN =
    _file_FILESTATUS_REBEGIN;
  static constexpr FILESTATUS BEGINEND =
    _file_FILESTATUS_BEGINEND;
  static constexpr FILESTATUS REBEGINEND =
    _file_FILESTATUS_REBEGINEND;
  static inline bool FILESTATUS_IsValid(int value) {
    return _file_FILESTATUS_IsValid(value);
  }
  static constexpr FILESTATUS FILESTATUS_MIN =
    _file_FILESTATUS_FILESTATUS_MIN;
  static constexpr FILESTATUS FILESTATUS_MAX =
    _file_FILESTATUS_FILESTATUS_MAX;
  static constexpr int FILESTATUS_ARRAYSIZE =
    _file_FILESTATUS_FILESTATUS_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FILESTATUS_descriptor() {
    return _file_FILESTATUS_descriptor();
  }
  template<typename T>
  static inline const std::string& FILESTATUS_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FILESTATUS>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FILESTATUS_Name.");
    return _file_FILESTATUS_Name(enum_t_value);
  }
  static inline bool FILESTATUS_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FILESTATUS* value) {
    return _file_FILESTATUS_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
    kDataFieldNumber = 4,
    kStSFieldNumber = 2,
    kStEFieldNumber = 3,
    kTotalFieldNumber = 5,
    kIdFieldNumber = 6,
  };
  // bytes cmd = 1;
  void clear_cmd();
  const std::string& cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd();
  PROTOBUF_NODISCARD std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // ._file.FILESTATUS st_s = 2;
  void clear_st_s();
  ::_file_FILESTATUS st_s() const;
  void set_st_s(::_file_FILESTATUS value);
  private:
  ::_file_FILESTATUS _internal_st_s() const;
  void _internal_set_st_s(::_file_FILESTATUS value);
  public:

  // ._file.FILESTATUS st_e = 3;
  void clear_st_e();
  ::_file_FILESTATUS st_e() const;
  void set_st_e(::_file_FILESTATUS value);
  private:
  ::_file_FILESTATUS _internal_st_e() const;
  void _internal_set_st_e(::_file_FILESTATUS value);
  public:

  // int64 total = 5;
  void clear_total();
  int64_t total() const;
  void set_total(int64_t value);
  private:
  int64_t _internal_total() const;
  void _internal_set_total(int64_t value);
  public:

  // int32 id = 6;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:_file)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    int st_s_;
    int st_e_;
    int64_t total_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datacode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// proto_package

// bytes name = 1;
inline void proto_package::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& proto_package::name() const {
  // @@protoc_insertion_point(field_get:proto_package.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void proto_package::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_package.name)
}
inline std::string* proto_package::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto_package.name)
  return _s;
}
inline const std::string& proto_package::_internal_name() const {
  return _impl_.name_.Get();
}
inline void proto_package::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* proto_package::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* proto_package::release_name() {
  // @@protoc_insertion_point(field_release:proto_package.name)
  return _impl_.name_.Release();
}
inline void proto_package::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_package.name)
}

// bytes data = 2;
inline void proto_package::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& proto_package::data() const {
  // @@protoc_insertion_point(field_get:proto_package.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void proto_package::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_package.data)
}
inline std::string* proto_package::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:proto_package.data)
  return _s;
}
inline const std::string& proto_package::_internal_data() const {
  return _impl_.data_.Get();
}
inline void proto_package::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* proto_package::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* proto_package::release_data() {
  // @@protoc_insertion_point(field_release:proto_package.data)
  return _impl_.data_.Release();
}
inline void proto_package::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_package.data)
}

// -------------------------------------------------------------------

// _file

// bytes cmd = 1;
inline void _file::clear_cmd() {
  _impl_.cmd_.ClearToEmpty();
}
inline const std::string& _file::cmd() const {
  // @@protoc_insertion_point(field_get:_file.cmd)
  return _internal_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void _file::set_cmd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cmd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:_file.cmd)
}
inline std::string* _file::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:_file.cmd)
  return _s;
}
inline const std::string& _file::_internal_cmd() const {
  return _impl_.cmd_.Get();
}
inline void _file::_internal_set_cmd(const std::string& value) {
  
  _impl_.cmd_.Set(value, GetArenaForAllocation());
}
inline std::string* _file::_internal_mutable_cmd() {
  
  return _impl_.cmd_.Mutable(GetArenaForAllocation());
}
inline std::string* _file::release_cmd() {
  // @@protoc_insertion_point(field_release:_file.cmd)
  return _impl_.cmd_.Release();
}
inline void _file::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  _impl_.cmd_.SetAllocated(cmd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cmd_.IsDefault()) {
    _impl_.cmd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:_file.cmd)
}

// ._file.FILESTATUS st_s = 2;
inline void _file::clear_st_s() {
  _impl_.st_s_ = 0;
}
inline ::_file_FILESTATUS _file::_internal_st_s() const {
  return static_cast< ::_file_FILESTATUS >(_impl_.st_s_);
}
inline ::_file_FILESTATUS _file::st_s() const {
  // @@protoc_insertion_point(field_get:_file.st_s)
  return _internal_st_s();
}
inline void _file::_internal_set_st_s(::_file_FILESTATUS value) {
  
  _impl_.st_s_ = value;
}
inline void _file::set_st_s(::_file_FILESTATUS value) {
  _internal_set_st_s(value);
  // @@protoc_insertion_point(field_set:_file.st_s)
}

// ._file.FILESTATUS st_e = 3;
inline void _file::clear_st_e() {
  _impl_.st_e_ = 0;
}
inline ::_file_FILESTATUS _file::_internal_st_e() const {
  return static_cast< ::_file_FILESTATUS >(_impl_.st_e_);
}
inline ::_file_FILESTATUS _file::st_e() const {
  // @@protoc_insertion_point(field_get:_file.st_e)
  return _internal_st_e();
}
inline void _file::_internal_set_st_e(::_file_FILESTATUS value) {
  
  _impl_.st_e_ = value;
}
inline void _file::set_st_e(::_file_FILESTATUS value) {
  _internal_set_st_e(value);
  // @@protoc_insertion_point(field_set:_file.st_e)
}

// bytes data = 4;
inline void _file::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& _file::data() const {
  // @@protoc_insertion_point(field_get:_file.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void _file::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:_file.data)
}
inline std::string* _file::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:_file.data)
  return _s;
}
inline const std::string& _file::_internal_data() const {
  return _impl_.data_.Get();
}
inline void _file::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* _file::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* _file::release_data() {
  // @@protoc_insertion_point(field_release:_file.data)
  return _impl_.data_.Release();
}
inline void _file::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:_file.data)
}

// int64 total = 5;
inline void _file::clear_total() {
  _impl_.total_ = int64_t{0};
}
inline int64_t _file::_internal_total() const {
  return _impl_.total_;
}
inline int64_t _file::total() const {
  // @@protoc_insertion_point(field_get:_file.total)
  return _internal_total();
}
inline void _file::_internal_set_total(int64_t value) {
  
  _impl_.total_ = value;
}
inline void _file::set_total(int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:_file.total)
}

// int32 id = 6;
inline void _file::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t _file::_internal_id() const {
  return _impl_.id_;
}
inline int32_t _file::id() const {
  // @@protoc_insertion_point(field_get:_file.id)
  return _internal_id();
}
inline void _file::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void _file::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:_file.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::_file_FILESTATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::_file_FILESTATUS>() {
  return ::_file_FILESTATUS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datacode_2eproto
